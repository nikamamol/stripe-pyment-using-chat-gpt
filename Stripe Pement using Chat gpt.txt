

// App.js
import { loadStripe } from '@stripe/stripe-js';
import { Elements } from '@stripe/react-stripe-js';
import CheckoutForm from './CheckoutForm';
import './App.css';

const stripePromise = loadStripe('pk_test_51OrCj0SGJ3M5HSsKXVJ1SL7WDgNGE2i1Q7FmjKoxBUYiEqejk9spQbjO3zTwynFTUFYRLl1OuxacYzKyuAYbX55500GB1iMGsY');

const App = () => {
  return (
    <div>
      <Elements stripe={stripePromise}>
        <CheckoutForm />
      </Elements>
    </div>
  );
};

export default App;

*****************************************************************************************************************
/*app.css*/

.stripe-form {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.form-row {
    margin-bottom: 15px;
}

.input-field {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.card-element {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.submit-button {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 10px 20px;
    cursor: pointer;
}

.submit-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

.error-message {
    color: red;
    margin-top: 10px;
}

****************************************************************************************************
import { useState } from 'react';
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import axios from 'axios';


const CheckoutForm = () => {
  const stripe = useStripe();
  const elements = useElements();
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState('');
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [amount, setAmount] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: 'card',
      card: elements.getElement(CardElement),
      billing_details: {
        email,
        name,
        address: {
          line1: address,
        },
      },
    });

    if (error) {
      setError(error.message);
      setLoading(false);
    } else {
      try {
        const response = await axios.post('your_api_endpoint', {
          paymentMethodId: paymentMethod.id,
          email,
          name,
          address,
          amount: parseInt(amount) * 100, // Convert amount to cents if required
        });
        console.log(response.data);
        setLoading(false);
      } catch (error) {
        setError('Failed to process payment. Please try again.');
        setLoading(false);
      }
    }
  };

  return (
 <center>
       <form onSubmit={handleSubmit} className="stripe-form">
      <div className="form-row">
        <label>Email:</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
          className="input-field"
        />
      </div>
      <div className="form-row">
        <label>Name:</label>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
          className="input-field"
        />
      </div>
      <div className="form-row">
        <label>Address:</label>
        <input
          type="text"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
          required
          className="input-field"
        />
      </div>
      <div className="form-row">
        <label>Amount:</label>
        <input
          type="number"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
          required
          className="input-field"
        />
      </div>
      <div className="form-row">
        <label>Card details:</label>
        <CardElement className="card-element" />
      </div>
      <button type="submit" disabled={!stripe || loading} className="submit-button">
        Pay
      </button>
      {error && <div className="error-message">{error}</div>}
    </form>
 </center>
  );
};

export default CheckoutForm;
